buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'application'
}

group 'd2t.terra'
version '1.0'

ext {
    appName = 'Abubaria'
    mainClassName = 'd2t.terra.abubaria.MainKt'
    assetsDir = new File('res')
    
    lwjglVersion = "3.3.2"
    jomlVersion = "1.10.5"
    lwjglNatives = "natives-windows"
}

repositories.addAll(buildscript.repositories)

dependencies {
    api 'org.jetbrains.kotlin:kotlin-stdlib'
    
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.joml:joml:${jomlVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

sourceSets.main.resources.srcDirs = ['res']
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

application {
    mainClass = project.mainClassName
    
    if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.MAC_OS) {
        applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
    }
}

run {
    workingDir = project.assetsDir
    standardInput = System.in
    enableAssertions = true
}

task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

dist.dependsOn classes